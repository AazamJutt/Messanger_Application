
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Aazam Sultan
 */
public class ClientHandler extends javax.swing.JFrame {

    /**
     * Creates new form ClientHandler
     */
        
    //An enum that tells client's status
    public enum Status{
        BUSY,
        FREE
    }
    
    //This Dictionary Stores the socket at which server is listening to that client
    static Dictionary<String,Socket> clients = new Hashtable<>();
    
    //This Dictionary Stores the status of client by its name
    static Dictionary<String,Status> status = new Hashtable<>();
 
    
    public ClientHandler() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menuPanel = new javax.swing.JPanel();
        menuLabel = new javax.swing.JLabel();
        infoPanel = new javax.swing.JPanel();
        contentPanel = new javax.swing.JPanel();
        nameBox = new javax.swing.JTextField();
        submitBtn = new javax.swing.JButton();
        noteLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(69, 73, 74));
        setLocation(new java.awt.Point(500, 200));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(400, 300));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 106, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Chatting App");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(120, 120, 120))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        menuPanel.setBackground(new java.awt.Color(170, 184, 194));
        menuPanel.setForeground(new java.awt.Color(255, 255, 255));

        menuLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        menuLabel.setText("Registeration");

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(menuLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(menuLabel)
                .addContainerGap())
        );

        infoPanel.setBackground(new java.awt.Color(69, 73, 74));

        contentPanel.setBackground(new java.awt.Color(69, 73, 74));
        contentPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 161;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 50, 0, 50);
        contentPanel.add(nameBox, gridBagConstraints);

        submitBtn.setBackground(new java.awt.Color(0, 106, 255));
        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 103, 0, 0);
        contentPanel.add(submitBtn, gridBagConstraints);

        noteLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        noteLabel.setForeground(new java.awt.Color(255, 255, 255));
        noteLabel.setText("Enter Your Name");

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(noteLabel)
                .addGap(123, 123, 123))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addComponent(noteLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        if(!nameBox.getText().equals(""))
        {
            System.out.println("client registered with name \""+ nameBox.getText()+"\"...");
            String name = nameBox.getText();
            clients.put(name, Server.soc);
            status.put(name, Status.FREE);
            try{
                DataOutputStream o = new DataOutputStream(clients.get(name).getOutputStream());
                System.out.println("Granted connection");
                o.writeUTF(Commands.GRANTED);
            }catch(Exception ex){   
            }
            displayOnlineClientsTo(name);
        }
    }//GEN-LAST:event_submitBtnActionPerformed
    
    //This method Displays online clients to requested Client
    public void displayOnlineClientsTo(String name)
    {
        contentPanel.setVisible(false);
        contentPanel.remove(submitBtn);
        contentPanel.remove(nameBox);
        noteLabel.setText("Click to Start Chat");
        menuLabel.setText("Online Clients");
        menuLabel.setIcon(new ImageIcon("images/online.png"));
        Enumeration e = clients.keys();
        if(Server.clientsCount>1)
        {            
            while(e.hasMoreElements())
            {
                String cl = e.nextElement().toString(); 
                
                //Displays Clients who are free in Online Clients Frame
                if(!cl.equals(name) && status.get(cl)!=Status.BUSY)
                {
                    JButton btn = new JButton(cl);
                    btn.setBackground(new Color(0,106,255));
                    btn.addActionListener((ActionEvent ev) ->{
                        String recipient = ev.getActionCommand();
                        
                        //Chat will start when user clicks one of the online Clients
                        this.setVisible(false);
                        
                        //Sends Request to client and if Accepted, Chat starts
                        if(getClientResponse(name,recipient))
                        {
                            //Sets status of both clients to busy
                            setBusyStatus(name,recipient);
                            notifyClients(name,recipient);
                            startChatThread(name,recipient);
                        }
                    });
                    contentPanel.add(btn);
                }
            }
            contentPanel.setVisible(true);
        }
        else
        {   
            this.setVisible(false);
            try{
                DataOutputStream o = new DataOutputStream(clients.get(name).getOutputStream());
                o.writeUTF("Server: No one is Online wait...");
            }catch(Exception ex){   
            }
        }
    }
    
    //This method will set status of Chatting Clients to Busy
    public void setBusyStatus(String client1,String client2)
    {
        status.put(client1, Status.BUSY);
        status.put(client2, Status.BUSY);
    }
    //This method tells client for recieved request and get his response
    public Boolean getClientResponse(String sender,String reciever)
    {
        try{
            //To send Message to requested client
            DataOutputStream rcvOut = new DataOutputStream(clients.get(reciever).getOutputStream());
            DataInputStream rcvIn = new DataInputStream(clients.get(reciever).getInputStream());
            
            //To send Message to requesting client
            DataOutputStream senOut = new DataOutputStream(clients.get(sender).getOutputStream());
            senOut.writeUTF("Server: waiting for "+ reciever+"'s response...");
            
            //Notifying client for request
            rcvOut.writeUTF("Server: \""+sender+"\" wants to send you a message\nTo Accept, send 'A'\nTo Reject,send 'R'");
            String msg = "";
            while(!msg.equalsIgnoreCase("A") && !msg.equalsIgnoreCase("R"))
            {
                msg = rcvIn.readUTF();
                if(!msg.equalsIgnoreCase("A") && !msg.equalsIgnoreCase("R"))
                    rcvOut.writeUTF("Server: Type A or R");
            }
            
            if(msg.equalsIgnoreCase("A"))
                return true;
            if(msg.equalsIgnoreCase("R"))
               return false;
        }catch(Exception ex){   
        }
        return false;
    }
    public void notifyClients(String client1,String client2)
    {
        try {
            //Notifying Client2 that client1 is the sender
            Server.out = new DataOutputStream(clients.get(client2).getOutputStream());
            
            //It notifies client, that chat is starting
            Server.out.writeUTF(Commands.CONNECTED);
            
            //Client gets the name of sender
            Server.out.writeUTF(client1);
            
            //Notifying Client1 that client2 is the sender
            Server.out = new DataOutputStream(clients.get(client1).getOutputStream());
            Server.out.writeUTF(Commands.CONNECTED);
            Server.out.writeUTF(client2);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    public void startChatThread(String client1,String client2)
    {
        //Client1 is sending and Client2 is recieving
        Thread t1 = new Thread(new ChatHead(client1,client2));
        
        //Client2 is sending and client1 is recieving
        Thread t2 = new Thread(new ChatHead(client2,client1));
        
        //starting both threads Simultaneously
        t1.start();
        t2.start();
    }
    /**
     * @param args the command line arguments
         * @return 
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JTextField nameBox;
    private javax.swing.JLabel noteLabel;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables

}

